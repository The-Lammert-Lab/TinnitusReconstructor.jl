var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = TinnitusReconstructor","category":"page"},{"location":"#TinnitusReconstructor","page":"Home","title":"TinnitusReconstructor","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for TinnitusReconstructor.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [TinnitusReconstructor]","category":"page"},{"location":"#TinnitusReconstructor.BinnedStimgen","page":"Home","title":"TinnitusReconstructor.BinnedStimgen","text":"BinnedStimgen <: Stimgen\n\nAbstract supertype for all binned stimulus generation.\n\n\n\n\n\n","category":"type"},{"location":"#TinnitusReconstructor.Stimgen","page":"Home","title":"TinnitusReconstructor.Stimgen","text":"Abstract supertype for all stimulus generation.\n\n\n\n\n\n","category":"type"},{"location":"#TinnitusReconstructor.TransformedDense","page":"Home","title":"TinnitusReconstructor.TransformedDense","text":"TransformedDense(in => out, σ=identity, σ2=identity; bias=true, init=glorot_uniform)\nTransformedDense(W::AbstractMatrix, [bias, σ, σ2])\n\nCreate a traditional fully connected layer, whose forward pass is given by:\ny = σ.(σ2(W) * x .+ bias)\n\nThe input x should be a vector of length in, or batch of vectors represented as an in × N matrix, or any array with size(x,1) == in. The out y will be a vector  of length out, or a batch with size(y) == (out, size(x)[2:end]...) Keyword bias=false will switch off trainable bias for the layer. The initialisation of the weight matrix is W = init(out, in), calling the function given to keyword init, with default glorot_uniform. The weight matrix and/or the bias vector (of length out) may also be provided explicitly.\n\nThis layer differs from Dense in that there is an extra nonlinear transformation of the weight matrix before multiplication with the input.\n\n\n\n\n\n","category":"type"},{"location":"#TinnitusReconstructor.UniformPrior-Tuple{}","page":"Home","title":"TinnitusReconstructor.UniformPrior","text":"UniformPrior(; kwargs...) <: BinnedStimgen\n\nConstructor for stimulus generation type in which      the number of filled bins is selected from      the Uniform distribution on the interval [min_bins, max_bins].\n\nKeywords\n\nmin_freq::Real = 100: The minimum frequency in range from which to sample.\nmax_freq::Real = 22e3: The maximum frequency in range from which to sample.\nduration::Real = 0.5: The length of time for which stimuli are played in seconds.\nFs::Real = 44.1e3: The frequency of the stimuli in Hz.\nn_bins::Integer = 100: The number of bins into which to partition the frequency range.\nmin_bins::Integer = 10: The minimum number of bins that may be filled on any stimuli.\nmax_bins::Integer = 50: The maximum number of bins that may be filled on any stimuli.\n\n\n\n\n\n","category":"method"},{"location":"#TinnitusReconstructor.binnedrepr2spect-Union{Tuple{T}, Tuple{BS}, Tuple{BS, AbstractArray{T}}} where {BS<:TinnitusReconstructor.BinnedStimgen, T}","page":"Home","title":"TinnitusReconstructor.binnedrepr2spect","text":"binnedrepr2spect(s::BinnedStimgen, binned_repr::AbstractArray{T}) where {BS<:BinnedStimgen,T}\n\nConvert the binned representation into a spectral representation.\n\nReturns an n_frequencies x n_trials spectral array, where n_trials = size(binned_repr, 2).\n\n\n\n\n\n","category":"method"},{"location":"#TinnitusReconstructor.crop_signal!-Union{Tuple{SampledSignals.AbstractSampleBuf{T, I}}, Tuple{I}, Tuple{T}} where {T, I}","page":"Home","title":"TinnitusReconstructor.crop_signal!","text":"crop_signal!(audio::SampleBuf{T, I}; start=0, stop=1) where {T, I}\n\nCrops an audio buffer to between start and stop in seconds. TODO: use Unitful to add dimensions to these values.\n\n\n\n\n\n","category":"method"},{"location":"#TinnitusReconstructor.crop_signal-Union{Tuple{SampledSignals.AbstractSampleBuf{T, I}}, Tuple{I}, Tuple{T}} where {T, I}","page":"Home","title":"TinnitusReconstructor.crop_signal","text":"crop_signal(audio::SampleBuf{T, I}; start=0, stop=1) where {T, I}\n\nReturns an audio buffer cropped to between start and stop in seconds. TODO: use Unitful to add dimensions to these values.\n\nSee also crop_signal!.\n\n\n\n\n\n","category":"method"},{"location":"#TinnitusReconstructor.cs-Union{Tuple{T}, Tuple{Any, AbstractArray{T}}, Tuple{Any, AbstractArray{T}, Integer}} where T<:Real","page":"Home","title":"TinnitusReconstructor.cs","text":"cs(responses, Φ, Γ::Integer=32)\n\nOne-bit compressed sensing reverse correlation with basis.\n\nReferences\n\nPlan, Y. and Vershynin, R., 2012. Robust 1-bit compressed sensing and sparse logistic regression: A convex programming approach. IEEE Transactions on Information Theory, 59(1), pp.482-494.\nZhang, L., Yi, J. and Jin, R., 2014, June. Efficient algorithms for robust one-bit compressive sensing. In International Conference on Machine Learning (pp. 820-828). PMLR.\n\n\n\n\n\n","category":"method"},{"location":"#TinnitusReconstructor.empty_spectrum-Tuple{BS} where BS<:TinnitusReconstructor.BinnedStimgen","page":"Home","title":"TinnitusReconstructor.empty_spectrum","text":"empty_spectrum(s::BS) where {BS<:BinnedStimgen}\n\nGenerate an nfft x 1 vector of Ints, where all values are -100. \n\n\n\n\n\n","category":"method"},{"location":"#TinnitusReconstructor.freq_bins-Tuple{BS} where BS<:TinnitusReconstructor.BinnedStimgen","page":"Home","title":"TinnitusReconstructor.freq_bins","text":"freq_bins(s::BS) where {BS<:BinnedStimgen}\n\nGenerates a vector indicating which frequencies belong to the same bin,     following a tonotopic map of audible frequency perception.\n\n\n\n\n\n","category":"method"},{"location":"#TinnitusReconstructor.fs-Tuple{SG} where SG<:TinnitusReconstructor.Stimgen","page":"Home","title":"TinnitusReconstructor.fs","text":"fs(s::SG) where {SG<:Stimgen}\n\nReturn the number of samples per second.\n\n\n\n\n\n","category":"method"},{"location":"#TinnitusReconstructor.gaussian_kernel-Tuple{Any, Any}","page":"Home","title":"TinnitusReconstructor.gaussian_kernel","text":"gaussian_kernel(x, y; σ=1)\n\nCompute the gaussian kernel for x and y. This is the function\n\nk_sigma  mathbbR^2m times mathbbR^2m rightarrow mathbbR (x y) mapsto k_sigma (x y) = exp left ( - frac12sigma^2 x-y^2 right ) \n\nExamples\n\njulia> TinnitusReconstructor.gaussian_kernel(1, 1)\n1.0\n\n\n\n\n\n","category":"method"},{"location":"#TinnitusReconstructor.generate_stimuli_matrix-Union{Tuple{I}, Tuple{BS}, Tuple{BS, I}} where {BS<:TinnitusReconstructor.BinnedStimgen, I<:Integer}","page":"Home","title":"TinnitusReconstructor.generate_stimuli_matrix","text":"generate_stimuli_matrix(s::BS, n_trials::I) where {BS<:BinnedStimgen, I<:Integer}\n\nGenerate n_trials of stimuli based on specifications in the stimgen type.\n\nReturns stimuli_matrix, Fs, spect_matrix, binned_repr_matrix. \n\n\n\n\n\n","category":"method"},{"location":"#TinnitusReconstructor.generate_stimuli_matrix-Union{Tuple{I}, Tuple{SG}, Tuple{SG, I}} where {SG<:TinnitusReconstructor.Stimgen, I<:Integer}","page":"Home","title":"TinnitusReconstructor.generate_stimuli_matrix","text":"generate_stimuli_matrix(s::SG, n_trials::I) where {SG<:Stimgen, I<:Integer}\n\nGenerate n_trials of stimuli based on specifications in the stimgen type.\n\nReturns stimuli_matrix, Fs, spect_matrix, binned_repr_matrix.      binned_repr_matrix = nothing if s >: BinnedStimgen.\n\n\n\n\n\n","category":"method"},{"location":"#TinnitusReconstructor.generate_stimulus-Tuple{UniformPrior}","page":"Home","title":"TinnitusReconstructor.generate_stimulus","text":"generate_stimulus(s::UniformPrior)\n\nGenerate one stimulus sound.\n\nReturns waveform, sample rate, spectral representation, binned representation, and a frequency vector.  \n\n\n\n\n\n","category":"method"},{"location":"#TinnitusReconstructor.gs-Tuple{Any, Any}","page":"Home","title":"TinnitusReconstructor.gs","text":"gs(responses, Φ)\n\nLinear reverse correlation.\n\nReferences\n\nGosselin, F. and Schyns, P.G., 2003. Superstitious perceptions reveal properties of internal representations. Psychological science, 14(5), pp.505-509.\n\n\n\n\n\n","category":"method"},{"location":"#TinnitusReconstructor.mmd","page":"Home","title":"TinnitusReconstructor.mmd","text":"mmd(x, y, σ=1)\n\nCompute the maximum mean discrepancy (MMD) between x and y using a Gaussian kernel.\n\nExamples\n\nTODO\n\n\n\n\n\n","category":"function"},{"location":"#TinnitusReconstructor.mmd-Tuple{Any, Any}","page":"Home","title":"TinnitusReconstructor.mmd","text":"mmd(x, y; σ=1)\n\nCompute the maximum mean discrepancy (MMD) between x and y using a Gaussian kernel with standard deviation parameter σ.\n\nExamples\n\njulia> mmd(1, 1)\n0.0\n\njulia> mmd(1, 2; σ=1)\n0.7869386805747332\n\njulia> mmd(1, 2; σ=2)\n0.2350061948308091\n\n\n\n\n\n","category":"method"},{"location":"#TinnitusReconstructor.nsamples-Tuple{SG} where SG<:TinnitusReconstructor.Stimgen","page":"Home","title":"TinnitusReconstructor.nsamples","text":"nsamples(s::SG) where {SG<:Stimgen}\n\nReturn the number of samples as an Integer. This means that the product fs(s) * s.duration must be an Integer or an InexactError will be thrown.\n\nExamples\n\n```jldoctest julia> s = UniformPrior(;Fs=44.1e3, duration=0.5); nsamples(s) 22050\n\njulia> s = UniformPrior(;Fs=44.1e3, duration=0.7); nsamples(s) ERROR: InexactError: Int64(30869.999999999996)\n\n\n\n\n\n","category":"method"},{"location":"#TinnitusReconstructor.phase_to_mm-Tuple{Any}","page":"Home","title":"TinnitusReconstructor.phase_to_mm","text":"phase_to_mm(Φ)\n\nConvert a matrix of phases Φ to a measurement matrix via frac1sqrtm exp(i Phi).\n\n\n\n\n\n","category":"method"},{"location":"#TinnitusReconstructor.play_scaled_audio-Tuple{Any, Any}","page":"Home","title":"TinnitusReconstructor.play_scaled_audio","text":"play_scaled_audio(x, Fs)\n\nScales audio signal from -1 to 1 then plays it. Adapted from MATLAB's soundsc().\n\n\n\n\n\n","category":"method"},{"location":"#TinnitusReconstructor.scaled_uniform-Tuple{Random.AbstractRNG, Vararg{Integer}}","page":"Home","title":"TinnitusReconstructor.scaled_uniform","text":"scaled_uniform([rng = Flux.default_rng_value()], size...; gain = 1) -> Array\nscaled_uniform([rng], kw...) -> Function\n\nReturn an Array{Float32} of the given size containing random numbers drawn from a uniform distribution on the interval gain * 0 1.\n\nExamples\n\njulia> round.(extrema(scaled_uniform(100, 10; gain=2π)), digits=3) (0.004, 6.282)\n\njulia> scaled_uniform(5) |> summary \"5-element Vector{Float32}\"\n\n\n\n\n\n","category":"method"},{"location":"#TinnitusReconstructor.soft_threshold-Tuple{Any, Any}","page":"Home","title":"TinnitusReconstructor.soft_threshold","text":"soft_threshold(α, γ)\n\nSoft thresholding operator for use in compressed sensing.\n\n\n\n\n\n","category":"method"},{"location":"#TinnitusReconstructor.spect2binnedrepr-Union{Tuple{T}, Tuple{BS}, Tuple{BS, AbstractArray{T}}} where {BS<:TinnitusReconstructor.BinnedStimgen, T}","page":"Home","title":"TinnitusReconstructor.spect2binnedrepr","text":"spect2binnedrepr(s::BinnedStimgen, spect::AbstractArray{T}) where {BS<:BinnedStimgen,T}\n\nConvert a spectral representation into a binned representation.\n\nReturns an n_trials x n_bins array containing the amplitude of the spectrum in each frequency bin,     where n_trials = size(binned_repr, 2). @doc \n\n\n\n\n\n","category":"method"},{"location":"#TinnitusReconstructor.stk-Tuple{Any}","page":"Home","title":"TinnitusReconstructor.stk","text":"stk(z)\n\nStack real and imaginary parts of a complex vector z in a real vector stk(z):\n\nmathrmstk  mathbbC^m rightarrow mathbbR^2m z mapsto mathrmstk(z) = leftmathcalR(z)^mathrmT mathcalI(z)^mathrmT right^mathrmT\n\n\n\n\n\n","category":"method"},{"location":"#TinnitusReconstructor.subject_selection_process","page":"Home","title":"TinnitusReconstructor.subject_selection_process","text":"subject_selection_process(s::SG, target_signal::AbstractVector{T}, n_trials::I) where {SG<:Stimgen, T<:Real, I<:Integer}\nsubject_selection_process(s::SG, target_signal::AbstractMatrix{T}, n_trials::I) where {SG<:Stimgen, T<:Real, I<:Integer}\nsubject_selection_process(stimuli::AbstractArray{T}, target_signal::AbstractVector{T}) where {T<:Real}\nsubject_selection_process(stimuli::AbstractArray{T}, target_signal::AbstractMatrix{T}) where {T<:Real}\n\nIdealized model of a subject performing the task.\n\nSpecify a Stimgen type from which to generate stimuli or input a stimuli matrix. If target_signal is a matrix, it must be one dimensional because that method simply applies vec(target_signal). Return an n_trials x 1 or size(stimuli, 1) x 1 vector of -1 for \"no\" and 1 for \"yes\".\n\n\n\n\n\n","category":"function"},{"location":"#TinnitusReconstructor.synthesize_audio-Tuple{Any, Any}","page":"Home","title":"TinnitusReconstructor.synthesize_audio","text":"synthesize_audio(X, nfft)\n\nSynthesize audio from spectrum, X\n\n\n\n\n\n","category":"method"},{"location":"#TinnitusReconstructor.wav2spect-Tuple{String}","page":"Home","title":"TinnitusReconstructor.wav2spect","text":"wav2spect(audio_file::String; duration=0.5)\n\nLoad an audio file, crop it to duration,     then compute and return the short time Fourier transform.\n\n\n\n\n\n","category":"method"},{"location":"#TinnitusReconstructor.zhangpassivegamma-Union{Tuple{T}, Tuple{AbstractArray{T}, Any, Integer}} where T<:Real","page":"Home","title":"TinnitusReconstructor.zhangpassivegamma","text":"zhangpassivegamma(Φ::AbstractArray{T}, y, Γ::Integer) where {T<:Real}\n\nPassive algorithm for 1-bit compressed sensing with no basis.\n\nReferences\n\nZhang, L., Yi, J. and Jin, R., 2014, June. Efficient algorithms for robust one-bit compressive sensing. In International Conference on Machine Learning (pp. 820-828). PMLR.\n\n\n\n\n\n","category":"method"}]
}
